/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd50140)
 * 
 * On Fri Apr  1 07:37:20 KST 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRightArithmeticPipelined.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 42u };
static tUWide const UWide_literal_72_h2aaaaaaaaaaaaaaaaa(72u,
							 UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_2("FAILED %d correct values out of %d", 34u);
static std::string const __str_literal_3("FAILED Right Arithmetic Shift %b >> %d gave %b instead of %b",
					 60u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRightArithmeticPipelined::MOD_mkTbRightArithmeticPipelined(tSimStateHdl simHdl,
								   char const *name,
								   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bsrap_bsrp_inFifo(simHdl, "bsrap_bsrp_inFifo", this, 71u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_outFifo(simHdl, "bsrap_bsrp_outFifo", this, 71u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_sReg1(simHdl,
			  "bsrap_bsrp_sReg1",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg2(simHdl,
			  "bsrap_bsrp_sReg2",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg3(simHdl,
			  "bsrap_bsrp_sReg3",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg4(simHdl,
			  "bsrap_bsrp_sReg4",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg5(simHdl,
			  "bsrap_bsrp_sReg5",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_correct(simHdl, "correct", this, 32u, 0u, (tUInt8)0u),
    INST_input_cycle(simHdl, "input_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_output_cycle(simHdl, "output_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomShift_init(simHdl, "randomShift_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal_init(simHdl, "randomVal_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_valFifo(simHdl, "valFifo", this, 70u, 10u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_bsrap_bsrp_sReg5___d5(72u),
    DEF_x__h18898(12297829382473034410llu),
    DEF_TASK_getRandom___d110(12297829382473034410llu),
    DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113(70u),
    DEF_bsrap_bsrp_sReg4___d74(72u),
    DEF_bsrap_bsrp_sReg3___d60(72u),
    DEF_bsrap_bsrp_sReg2___d45(72u),
    DEF_bsrap_bsrp_sReg1___d28(72u),
    DEF_bsrap_bsrp_outFifo_first____d129(71u),
    DEF_bsrap_bsrp_inFifo_first____d11(71u),
    DEF_valFifo_first____d131(70u),
    DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86(72u),
    DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73(72u),
    DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59(72u),
    DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44(72u),
    DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27(72u),
    DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97(71u),
    DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115(71u)
{
  symbol_count = 20u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRightArithmeticPipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "bsrap_bsrp_inFifo", SYM_MODULE, &INST_bsrap_bsrp_inFifo);
  init_symbol(&symbols[1u], "bsrap_bsrp_outFifo", SYM_MODULE, &INST_bsrap_bsrp_outFifo);
  init_symbol(&symbols[2u], "bsrap_bsrp_sReg1", SYM_MODULE, &INST_bsrap_bsrp_sReg1);
  init_symbol(&symbols[3u], "bsrap_bsrp_sReg2", SYM_MODULE, &INST_bsrap_bsrp_sReg2);
  init_symbol(&symbols[4u], "bsrap_bsrp_sReg3", SYM_MODULE, &INST_bsrap_bsrp_sReg3);
  init_symbol(&symbols[5u], "bsrap_bsrp_sReg4", SYM_MODULE, &INST_bsrap_bsrp_sReg4);
  init_symbol(&symbols[6u], "bsrap_bsrp_sReg5", SYM_MODULE, &INST_bsrap_bsrp_sReg5);
  init_symbol(&symbols[7u], "correct", SYM_MODULE, &INST_correct);
  init_symbol(&symbols[8u], "input_cycle", SYM_MODULE, &INST_input_cycle);
  init_symbol(&symbols[9u], "output_cycle", SYM_MODULE, &INST_output_cycle);
  init_symbol(&symbols[10u], "RL_bsrap_bsrp_shift", SYM_RULE);
  init_symbol(&symbols[11u], "RL_randomShift_initialize", SYM_RULE);
  init_symbol(&symbols[12u], "RL_randomVal_initialize", SYM_RULE);
  init_symbol(&symbols[13u], "RL_test_request", SYM_RULE);
  init_symbol(&symbols[14u], "RL_test_response", SYM_RULE);
  init_symbol(&symbols[15u], "randomShift_init", SYM_MODULE, &INST_randomShift_init);
  init_symbol(&symbols[16u], "randomVal_init", SYM_MODULE, &INST_randomVal_init);
  init_symbol(&symbols[17u], "valFifo", SYM_MODULE, &INST_valFifo);
  init_symbol(&symbols[18u], "x__h19120", SYM_DEF, &DEF_x__h19120, 32u);
  init_symbol(&symbols[19u], "x__h19482", SYM_DEF, &DEF_x__h19482, 32u);
}


/* Rule actions */

void MOD_mkTbRightArithmeticPipelined::RL_bsrap_bsrp_shift()
{
  tUInt8 DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34;
  tUInt8 DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14;
  tUInt8 DEF_bsrap_bsrp_sReg2_5_BIT_0_0_CONCAT_bsrap_bsrp_s_ETC___d51;
  tUInt8 DEF_bsrap_bsrp_sReg3_0_BIT_0_5_CONCAT_bsrap_bsrp_s_ETC___d66;
  tUInt8 DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13;
  tUInt64 DEF_x__h536;
  tUInt64 DEF_x__h2774;
  tUInt64 DEF_x__h5683;
  tUInt64 DEF_x__h8768;
  tUInt64 DEF_x__h11941;
  tUInt64 DEF_x__h15124;
  tUInt8 DEF_x__h16849;
  tUInt8 DEF_x__h4484;
  tUInt8 DEF_x__h7401;
  tUInt8 DEF_x__h10490;
  tUInt8 DEF_x__h13665;
  tUInt8 DEF_x__h15286;
  tUInt8 DEF_x__h2936;
  tUInt8 DEF_x__h5845;
  tUInt8 DEF_x__h8930;
  tUInt8 DEF_x__h12103;
  tUInt64 DEF_operand__h2775;
  tUInt64 DEF_operand__h5684;
  tUInt64 DEF_operand__h8769;
  tUInt64 DEF_operand__h11942;
  tUInt64 DEF_operand__h15125;
  tUInt64 DEF_operand__h537;
  tUInt64 DEF_x__h15399;
  tUInt64 DEF_x__h3049;
  tUInt64 DEF_x__h5958;
  tUInt64 DEF_x__h9043;
  tUInt64 DEF_x__h12216;
  DEF_bsrap_bsrp_sReg5___d5 = INST_bsrap_bsrp_sReg5.METH_read();
  DEF_x__h15399 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg5___d5, 32u, 70u, 32u, 7u);
  DEF_operand__h15125 = DEF_x__h15399;
  DEF_x__h15286 = DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(0u, 1u, 6u);
  DEF_x__h16849 = DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h15124 = (tUInt8)((tUInt8)1u & DEF_x__h15286) ? (((tUInt64)(DEF_x__h16849)) << 63u) | (tUInt64)(DEF_operand__h15125 >> 1u) : DEF_operand__h15125;
  DEF_bsrap_bsrp_sReg4___d74 = INST_bsrap_bsrp_sReg4.METH_read();
  DEF_x__h12216 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg4___d74, 32u, 70u, 32u, 7u);
  DEF_operand__h11942 = DEF_x__h12216;
  DEF_x__h12103 = DEF_bsrap_bsrp_sReg4___d74.get_bits_in_word8(0u, 1u, 6u);
  DEF_x__h13665 = DEF_bsrap_bsrp_sReg4___d74.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h11941 = (tUInt8)((tUInt8)1u & (DEF_x__h12103 >> 1u)) ? ((((tUInt64)(DEF_x__h13665)) << 63u) | (((tUInt64)(DEF_x__h13665)) << 62u)) | (tUInt64)(DEF_operand__h11942 >> 2u) : DEF_operand__h11942;
  DEF_bsrap_bsrp_sReg3___d60 = INST_bsrap_bsrp_sReg3.METH_read();
  DEF_x__h9043 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg3___d60, 32u, 70u, 32u, 7u);
  DEF_operand__h8769 = DEF_x__h9043;
  DEF_x__h8930 = DEF_bsrap_bsrp_sReg3___d60.get_bits_in_word8(0u, 1u, 6u);
  DEF_x__h10490 = DEF_bsrap_bsrp_sReg3___d60.get_bits_in_word8(0u, 0u, 1u);
  DEF_bsrap_bsrp_sReg2___d45 = INST_bsrap_bsrp_sReg2.METH_read();
  DEF_x__h5958 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg2___d45, 32u, 70u, 32u, 7u);
  DEF_operand__h5684 = DEF_x__h5958;
  DEF_x__h5845 = DEF_bsrap_bsrp_sReg2___d45.get_bits_in_word8(0u, 1u, 6u);
  DEF_x__h7401 = DEF_bsrap_bsrp_sReg2___d45.get_bits_in_word8(0u, 0u, 1u);
  DEF_bsrap_bsrp_sReg1___d28 = INST_bsrap_bsrp_sReg1.METH_read();
  DEF_x__h3049 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg1___d28, 32u, 70u, 32u, 7u);
  DEF_operand__h2775 = DEF_x__h3049;
  DEF_x__h2936 = DEF_bsrap_bsrp_sReg1___d28.get_bits_in_word8(0u, 1u, 6u);
  DEF_x__h4484 = DEF_bsrap_bsrp_sReg1___d28.get_bits_in_word8(0u, 0u, 1u);
  DEF_bsrap_bsrp_inFifo_notEmpty____d1 = INST_bsrap_bsrp_inFifo.METH_notEmpty();
  DEF_bsrap_bsrp_inFifo_first____d11 = INST_bsrap_bsrp_inFifo.METH_first();
  DEF_operand__h537 = primExtract64(64u, 71u, DEF_bsrap_bsrp_inFifo_first____d11, 32u, 70u, 32u, 7u);
  DEF_bsrap_bsrp_sReg5_BIT_71___d6 = DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(2u, 7u, 1u);
  DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
												    0u,
												    1u);
  DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg4___d74.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h11941 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h11941 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h11941)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg4___d74.get_bits_in_word8(0u,
																											      0u,
																											      7u)),
														      0u);
  DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97.set_bits_in_word((tUInt8)(DEF_x__h15124 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_x__h15124 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h15124)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_sReg3_0_BIT_0_5_CONCAT_bsrap_bsrp_s_ETC___d66 = (tUInt8)3u & ((DEF_x__h10490 << 1u) | DEF_x__h10490);
  DEF_x__h8768 = (tUInt8)((tUInt8)1u & (DEF_x__h8930 >> 2u)) ? ((((tUInt64)(DEF_bsrap_bsrp_sReg3_0_BIT_0_5_CONCAT_bsrap_bsrp_s_ETC___d66)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_0_BIT_0_5_CONCAT_bsrap_bsrp_s_ETC___d66)) << 60u)) | (tUInt64)(DEF_operand__h8769 >> 4u) : DEF_operand__h8769;
  DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg3___d60.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h8768 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h8768 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h8768)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg3___d60.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_sReg2_5_BIT_0_0_CONCAT_bsrap_bsrp_s_ETC___d51 = (tUInt8)3u & ((DEF_x__h7401 << 1u) | DEF_x__h7401);
  DEF_x__h5683 = (tUInt8)((tUInt8)1u & (DEF_x__h5845 >> 3u)) ? ((((((tUInt64)(DEF_bsrap_bsrp_sReg2_5_BIT_0_0_CONCAT_bsrap_bsrp_s_ETC___d51)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_5_BIT_0_0_CONCAT_bsrap_bsrp_s_ETC___d51)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_5_BIT_0_0_CONCAT_bsrap_bsrp_s_ETC___d51)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_5_BIT_0_0_CONCAT_bsrap_bsrp_s_ETC___d51)) << 56u)) | (tUInt64)(DEF_operand__h5684 >> 8u) : DEF_operand__h5684;
  DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg2___d45.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h5683 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h5683 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h5683)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg2___d45.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14 = (tUInt8)3u & ((DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13 << 1u) | DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13);
  DEF_x__h536 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
								     6u,
								     1u) ? ((((((((((((((((((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 56u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 54u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 52u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 50u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 48u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 46u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 44u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 42u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 40u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 38u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 36u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 34u)) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0_3_CONCAT_bsra_ETC___d14)) << 32u)) | (tUInt64)(primExtract32(32u,
																																																																																																																																																																																										 71u,
																																																																																																																																																																																										 DEF_bsrap_bsrp_inFifo_first____d11,
																																																																																																																																																																																										 32u,
																																																																																																																																																																																										 70u,
																																																																																																																																																																																										 32u,
																																																																																																																																																																																										 39u)) : DEF_operand__h537;
  DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_inFifo_notEmpty____d1 << 7u) | (tUInt8)(DEF_x__h536 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h536 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h536)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																												    0u,
																												    7u)),
														      0u);
  DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34 = (tUInt8)3u & ((DEF_x__h4484 << 1u) | DEF_x__h4484);
  DEF_x__h2774 = (tUInt8)((tUInt8)1u & (DEF_x__h2936 >> 4u)) ? ((((((((((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 56u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 54u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 52u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 50u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_8_BIT_0_3_CONCAT_bsrap_bsrp_s_ETC___d34)) << 48u)) | (tUInt64)(DEF_operand__h2775 >> 16u) : DEF_operand__h2775;
  DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg1___d28.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h2774 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h2774 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h2774)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg1___d28.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  INST_bsrap_bsrp_sReg1.METH_write(DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27);
  if (DEF_bsrap_bsrp_inFifo_notEmpty____d1)
    INST_bsrap_bsrp_inFifo.METH_deq();
  INST_bsrap_bsrp_sReg2.METH_write(DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44);
  INST_bsrap_bsrp_sReg3.METH_write(DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59);
  INST_bsrap_bsrp_sReg4.METH_write(DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73);
  if (DEF_bsrap_bsrp_sReg5_BIT_71___d6)
    INST_bsrap_bsrp_outFifo.METH_enq(DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97);
  INST_bsrap_bsrp_sReg5.METH_write(DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomVal_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3735928559llu);
  INST_randomVal_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomShift_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3405691582llu);
  INST_randomShift_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_request()
{
  tUInt32 DEF_x__h19101;
  tUInt8 DEF_x__h19073;
  tUInt8 DEF_x__h19044;
  DEF_x__h19120 = INST_input_cycle.METH_read();
  DEF_x__h19101 = DEF_x__h19120 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_TASK_getRandom___d110 = getRandom();
  DEF_x__h19073 = (tUInt8)(DEF_TASK_getRandom___d110 >> 63u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h18898 = getRandom();
  DEF_x__h19044 = (tUInt8)((tUInt8)63u & DEF_x__h18898);
  DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d110 >> 58u),
										 2u,
										 0u,
										 6u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d110 >> 26u),
												    1u).set_whole_word((((tUInt32)(67108863u & DEF_TASK_getRandom___d110)) << 6u) | (tUInt32)(DEF_x__h19044),
														       0u);
  DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d110 >> 57u),
										 2u,
										 0u,
										 7u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d110 >> 25u),
												    1u).set_whole_word(((((tUInt32)(33554431u & DEF_TASK_getRandom___d110)) << 7u) | (((tUInt32)(DEF_x__h19044)) << 1u)) | (tUInt32)(DEF_x__h19073),
														       0u);
  INST_valFifo.METH_enq(DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113);
  INST_bsrap_bsrp_inFifo.METH_enq(DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115);
  INST_input_cycle.METH_write(DEF_x__h19101);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_response()
{
  tUInt32 DEF_x__h19478;
  tUInt32 DEF_x__h19349;
  tUInt8 DEF_output_cycle_17_EQ_128_18_AND_correct_23_EQ_12_ETC___d125;
  tUInt8 DEF_output_cycle_17_EQ_128_18_AND_NOT_correct_23_E_ETC___d127;
  tUInt8 DEF_NOT_output_cycle_17_EQ_128_18_28_AND_bsrap_bsr_ETC___d136;
  tUInt8 DEF_NOT_output_cycle_17_EQ_128_18___d128;
  tUInt8 DEF_NOT_output_cycle_17_EQ_128_18_28_AND_NOT_bsrap_ETC___d139;
  tUInt8 DEF_correct_23_EQ_128___d124;
  tUInt64 DEF_trueResult__h19277;
  tUInt8 DEF_valFifo_first__31_BITS_5_TO_0___d133;
  tUInt64 DEF_val__h19274;
  tUInt64 DEF_v__h19207;
  tUInt32 DEF_x__h19368;
  tUInt8 DEF_bsrap_bsrp_outFifo_first__29_BITS_70_TO_7_30_E_ETC___d135;
  DEF_x__h19482 = INST_output_cycle.METH_read();
  DEF_x__h19368 = INST_correct.METH_read();
  DEF_bsrap_bsrp_outFifo_first____d129 = INST_bsrap_bsrp_outFifo.METH_first();
  DEF_valFifo_first____d131 = INST_valFifo.METH_first();
  DEF_v__h19207 = primExtract64(64u, 71u, DEF_bsrap_bsrp_outFifo_first____d129, 32u, 70u, 32u, 7u);
  DEF_val__h19274 = primExtract64(64u, 70u, DEF_valFifo_first____d131, 32u, 69u, 32u, 6u);
  DEF_valFifo_first__31_BITS_5_TO_0___d133 = DEF_valFifo_first____d131.get_bits_in_word8(0u, 0u, 6u);
  DEF_trueResult__h19277 = primShiftRA64(64u,
					 64u,
					 (tUInt64)(DEF_val__h19274),
					 6u,
					 (tUInt8)(DEF_valFifo_first__31_BITS_5_TO_0___d133));
  DEF_bsrap_bsrp_outFifo_first__29_BITS_70_TO_7_30_E_ETC___d135 = DEF_v__h19207 == DEF_trueResult__h19277;
  DEF_correct_23_EQ_128___d124 = DEF_x__h19368 == 128u;
  DEF_output_cycle_17_EQ_128___d118 = DEF_x__h19482 == 128u;
  DEF_NOT_output_cycle_17_EQ_128_18___d128 = !DEF_output_cycle_17_EQ_128___d118;
  DEF_NOT_output_cycle_17_EQ_128_18_28_AND_NOT_bsrap_ETC___d139 = DEF_NOT_output_cycle_17_EQ_128_18___d128 && !DEF_bsrap_bsrp_outFifo_first__29_BITS_70_TO_7_30_E_ETC___d135;
  DEF_NOT_output_cycle_17_EQ_128_18_28_AND_bsrap_bsr_ETC___d136 = DEF_NOT_output_cycle_17_EQ_128_18___d128 && DEF_bsrap_bsrp_outFifo_first__29_BITS_70_TO_7_30_E_ETC___d135;
  DEF_output_cycle_17_EQ_128_18_AND_NOT_correct_23_E_ETC___d127 = DEF_output_cycle_17_EQ_128___d118 && !DEF_correct_23_EQ_128___d124;
  DEF_output_cycle_17_EQ_128_18_AND_correct_23_EQ_12_ETC___d125 = DEF_output_cycle_17_EQ_128___d118 && DEF_correct_23_EQ_128___d124;
  DEF_x__h19349 = DEF_x__h19368 + 1u;
  DEF_x__h19478 = DEF_x__h19482 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_output_cycle_17_EQ_128_18_AND_correct_23_EQ_12_ETC___d125)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_output_cycle_17_EQ_128_18_AND_correct_23_EQ_12_ETC___d125)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_output_cycle_17_EQ_128_18_AND_NOT_correct_23_E_ETC___d127)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_2, DEF_x__h19368, DEF_x__h19482);
    if (DEF_output_cycle_17_EQ_128_18_AND_NOT_correct_23_E_ETC___d127)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_17_EQ_128_18___d128)
    INST_bsrap_bsrp_outFifo.METH_deq();
  if (DEF_NOT_output_cycle_17_EQ_128_18_28_AND_bsrap_bsr_ETC___d136)
    INST_correct.METH_write(DEF_x__h19349);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_output_cycle_17_EQ_128_18_28_AND_NOT_bsrap_ETC___d139)
      dollar_display(sim_hdl,
		     this,
		     "s,64,6,64,64",
		     &__str_literal_3,
		     DEF_val__h19274,
		     DEF_valFifo_first__31_BITS_5_TO_0___d133,
		     DEF_v__h19207,
		     DEF_trueResult__h19277);
    if (DEF_NOT_output_cycle_17_EQ_128_18_28_AND_NOT_bsrap_ETC___d139)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_17_EQ_128_18___d128)
    INST_valFifo.METH_deq();
  if (DEF_NOT_output_cycle_17_EQ_128_18___d128)
    INST_output_cycle.METH_write(DEF_x__h19478);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRightArithmeticPipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_valFifo.reset_RST(ARG_rst_in);
  INST_randomVal_init.reset_RST(ARG_rst_in);
  INST_randomShift_init.reset_RST(ARG_rst_in);
  INST_output_cycle.reset_RST(ARG_rst_in);
  INST_input_cycle.reset_RST(ARG_rst_in);
  INST_correct.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg5.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg4.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg3.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg2.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg1.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_outFifo.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_inFifo.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRightArithmeticPipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRightArithmeticPipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bsrap_bsrp_inFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_outFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg1.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg2.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg3.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg4.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg5.dump_state(indent + 2u);
  INST_correct.dump_state(indent + 2u);
  INST_input_cycle.dump_state(indent + 2u);
  INST_output_cycle.dump_state(indent + 2u);
  INST_randomShift_init.dump_state(indent + 2u);
  INST_randomVal_init.dump_state(indent + 2u);
  INST_valFifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRightArithmeticPipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 37u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97", 71u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom___d110", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_first____d11", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_outFifo_first____d129", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg1___d28", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg2___d45", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg3___d60", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg4___d74", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg5_BIT_71___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg5___d5", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "output_cycle_17_EQ_128___d118", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "valFifo_first____d131", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h18898", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h19120", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h19482", 32u);
  num = INST_bsrap_bsrp_inFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_outFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg1.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg2.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg3.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg4.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg5.dump_VCD_defs(num);
  num = INST_correct.dump_VCD_defs(num);
  num = INST_input_cycle.dump_VCD_defs(num);
  num = INST_output_cycle.dump_VCD_defs(num);
  num = INST_randomShift_init.dump_VCD_defs(num);
  num = INST_randomVal_init.dump_VCD_defs(num);
  num = INST_valFifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRightArithmeticPipelined::dump_VCD(tVCDDumpType dt,
						unsigned int levels,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRightArithmeticPipelined::vcd_defs(tVCDDumpType dt,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97) != DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97, 71u);
	backing.DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97 = DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113) != DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113, 70u);
	backing.DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113 = DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115) != DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115, 71u);
	backing.DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115 = DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom___d110) != DEF_TASK_getRandom___d110)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom___d110, 64u);
	backing.DEF_TASK_getRandom___d110 = DEF_TASK_getRandom___d110;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_first____d11) != DEF_bsrap_bsrp_inFifo_first____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
	backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27) != DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27, 72u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1) != DEF_bsrap_bsrp_inFifo_notEmpty____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_outFifo_first____d129) != DEF_bsrap_bsrp_outFifo_first____d129)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_outFifo_first____d129, 71u);
	backing.DEF_bsrap_bsrp_outFifo_first____d129 = DEF_bsrap_bsrp_outFifo_first____d129;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44) != DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44, 72u);
	backing.DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44 = DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg1___d28) != DEF_bsrap_bsrp_sReg1___d28)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg1___d28, 72u);
	backing.DEF_bsrap_bsrp_sReg1___d28 = DEF_bsrap_bsrp_sReg1___d28;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59) != DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59, 72u);
	backing.DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59 = DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg2___d45) != DEF_bsrap_bsrp_sReg2___d45)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg2___d45, 72u);
	backing.DEF_bsrap_bsrp_sReg2___d45 = DEF_bsrap_bsrp_sReg2___d45;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73) != DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73, 72u);
	backing.DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73 = DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg3___d60) != DEF_bsrap_bsrp_sReg3___d60)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg3___d60, 72u);
	backing.DEF_bsrap_bsrp_sReg3___d60 = DEF_bsrap_bsrp_sReg3___d60;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86) != DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86, 72u);
	backing.DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86 = DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg4___d74) != DEF_bsrap_bsrp_sReg4___d74)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg4___d74, 72u);
	backing.DEF_bsrap_bsrp_sReg4___d74 = DEF_bsrap_bsrp_sReg4___d74;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg5_BIT_71___d6) != DEF_bsrap_bsrp_sReg5_BIT_71___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg5_BIT_71___d6, 1u);
	backing.DEF_bsrap_bsrp_sReg5_BIT_71___d6 = DEF_bsrap_bsrp_sReg5_BIT_71___d6;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg5___d5) != DEF_bsrap_bsrp_sReg5___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg5___d5, 72u);
	backing.DEF_bsrap_bsrp_sReg5___d5 = DEF_bsrap_bsrp_sReg5___d5;
      }
      ++num;
      if ((backing.DEF_output_cycle_17_EQ_128___d118) != DEF_output_cycle_17_EQ_128___d118)
      {
	vcd_write_val(sim_hdl, num, DEF_output_cycle_17_EQ_128___d118, 1u);
	backing.DEF_output_cycle_17_EQ_128___d118 = DEF_output_cycle_17_EQ_128___d118;
      }
      ++num;
      if ((backing.DEF_valFifo_first____d131) != DEF_valFifo_first____d131)
      {
	vcd_write_val(sim_hdl, num, DEF_valFifo_first____d131, 70u);
	backing.DEF_valFifo_first____d131 = DEF_valFifo_first____d131;
      }
      ++num;
      if ((backing.DEF_x__h18898) != DEF_x__h18898)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h18898, 64u);
	backing.DEF_x__h18898 = DEF_x__h18898;
      }
      ++num;
      if ((backing.DEF_x__h19120) != DEF_x__h19120)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h19120, 32u);
	backing.DEF_x__h19120 = DEF_x__h19120;
      }
      ++num;
      if ((backing.DEF_x__h19482) != DEF_x__h19482)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h19482, 32u);
	backing.DEF_x__h19482 = DEF_x__h19482;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97, 71u);
      backing.DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97 = DEF_IF_IF_bsrap_bsrp_sReg5_BIT_71_THEN_bsrap_bsrp__ETC___d97;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113, 70u);
      backing.DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113 = DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d113;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115, 71u);
      backing.DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115 = DEF_TASK_getRandom_10_CONCAT_TASK_getRandom_11_BIT_ETC___d115;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom___d110, 64u);
      backing.DEF_TASK_getRandom___d110 = DEF_TASK_getRandom___d110;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
      backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27, 72u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d27;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_outFifo_first____d129, 71u);
      backing.DEF_bsrap_bsrp_outFifo_first____d129 = DEF_bsrap_bsrp_outFifo_first____d129;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44, 72u);
      backing.DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44 = DEF_bsrap_bsrp_sReg1_8_BIT_71_9_CONCAT_IF_IF_bsrap_ETC___d44;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg1___d28, 72u);
      backing.DEF_bsrap_bsrp_sReg1___d28 = DEF_bsrap_bsrp_sReg1___d28;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59, 72u);
      backing.DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59 = DEF_bsrap_bsrp_sReg2_5_BIT_71_6_CONCAT_IF_IF_bsrap_ETC___d59;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg2___d45, 72u);
      backing.DEF_bsrap_bsrp_sReg2___d45 = DEF_bsrap_bsrp_sReg2___d45;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73, 72u);
      backing.DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73 = DEF_bsrap_bsrp_sReg3_0_BIT_71_1_CONCAT_IF_IF_bsrap_ETC___d73;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg3___d60, 72u);
      backing.DEF_bsrap_bsrp_sReg3___d60 = DEF_bsrap_bsrp_sReg3___d60;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86, 72u);
      backing.DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86 = DEF_bsrap_bsrp_sReg4_4_BIT_71_5_CONCAT_IF_IF_bsrap_ETC___d86;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg4___d74, 72u);
      backing.DEF_bsrap_bsrp_sReg4___d74 = DEF_bsrap_bsrp_sReg4___d74;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg5_BIT_71___d6, 1u);
      backing.DEF_bsrap_bsrp_sReg5_BIT_71___d6 = DEF_bsrap_bsrp_sReg5_BIT_71___d6;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg5___d5, 72u);
      backing.DEF_bsrap_bsrp_sReg5___d5 = DEF_bsrap_bsrp_sReg5___d5;
      vcd_write_val(sim_hdl, num++, DEF_output_cycle_17_EQ_128___d118, 1u);
      backing.DEF_output_cycle_17_EQ_128___d118 = DEF_output_cycle_17_EQ_128___d118;
      vcd_write_val(sim_hdl, num++, DEF_valFifo_first____d131, 70u);
      backing.DEF_valFifo_first____d131 = DEF_valFifo_first____d131;
      vcd_write_val(sim_hdl, num++, DEF_x__h18898, 64u);
      backing.DEF_x__h18898 = DEF_x__h18898;
      vcd_write_val(sim_hdl, num++, DEF_x__h19120, 32u);
      backing.DEF_x__h19120 = DEF_x__h19120;
      vcd_write_val(sim_hdl, num++, DEF_x__h19482, 32u);
      backing.DEF_x__h19482 = DEF_x__h19482;
    }
}

void MOD_mkTbRightArithmeticPipelined::vcd_prims(tVCDDumpType dt,
						 MOD_mkTbRightArithmeticPipelined &backing)
{
  INST_bsrap_bsrp_inFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_inFifo);
  INST_bsrap_bsrp_outFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_outFifo);
  INST_bsrap_bsrp_sReg1.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg1);
  INST_bsrap_bsrp_sReg2.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg2);
  INST_bsrap_bsrp_sReg3.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg3);
  INST_bsrap_bsrp_sReg4.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg4);
  INST_bsrap_bsrp_sReg5.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg5);
  INST_correct.dump_VCD(dt, backing.INST_correct);
  INST_input_cycle.dump_VCD(dt, backing.INST_input_cycle);
  INST_output_cycle.dump_VCD(dt, backing.INST_output_cycle);
  INST_randomShift_init.dump_VCD(dt, backing.INST_randomShift_init);
  INST_randomVal_init.dump_VCD(dt, backing.INST_randomVal_init);
  INST_valFifo.dump_VCD(dt, backing.INST_valFifo);
}
